<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:mate="http://mate.asfusion.com/" 
				width="600" height="350" 
				creationComplete="initDefaultMic()" 
				styleName="micSettingsWindowStyle"
				showCloseButton="false" 
				close="onCancelClicked()" 
				keyDown="handleKeyDown(event)">
	
	<mx:Script>
		<![CDATA[
			import flash.system.Security;
			import flash.system.SecurityPanel;
			import flash.ui.Keyboard;
			
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var timer:Timer;
			private var mic:Microphone;
			private var playingAudio:Boolean = false;
			private var images:Images = new Images();
			[Bindable] private var cancelIcon:Class = images.cancel;
			
			private function initDefaultMic():void {
				mic = Microphone.getMicrophone(-1);
				
				if (mic != null) {
					if (mic.muted) {
						// user has disallowed access to the mic
						mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
						Security.showSettings(SecurityPanel.PRIVACY);
					} else {
            showMicSettingsPanel();
					}
				} else {
					LogUtil.warn("Microphone is used by another application.");
				}
				timer = new Timer(100);
				timer.addEventListener(TimerEvent.TIMER, updateMicLevel);
				timer.start();	
			}
			
			// Added by Chad to enable closing the window without clicking the X
			private function handleKeyDown(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
			
			private function micStatusEventHandler(event:StatusEvent):void {					
				switch(event.code) {
					case "Microphone.Muted":						
						LogUtil.warn("Access to microphone has been denied.");
            trace("Access to microphone has been denied.");
						break;
					case "Microphone.Unmuted":
            mic.setUseEchoSuppression(true);
            mic.setLoopBack(false);
            mic.gain = 60;
            mic.rate = 44; 
						LogUtil.debug("Access to the microphone has been allowed.");
            trace("Access to the microphone has been allowed.");
						break;
					default:
						LogUtil.debug("unknown micStatusHandler event: " + event);
				}
			}			
			
			private function updateMicLevel(e:TimerEvent):void{
				if (mic != null) {
					mic1Label.text = mic.name;
					micLevel1.setProgress(mic.activityLevel, 100);					
				}
			}
					
			private function showMicSettingsPanel():void {
        mic.addEventListener(StatusEvent.STATUS, micStatusEventHandler);
				Security.showSettings(SecurityPanel.MICROPHONE);
			}
			
			private function onJoinClicked():void {
				cleanUp();
				var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				joinEvent.payload['useMicrophone'] = true;
				dispatchEvent(joinEvent);
				PopUpManager.removePopUp(this);
			}	
			
			private function onCancelClicked():void {
				cleanUp();
				var event:BBBEvent = new BBBEvent(BBBEvent.MIC_SETTINGS_CLOSED);
				event.payload['clicked'] = "cancel";
				dispatchEvent(event);
				PopUpManager.removePopUp(this);
			}
			
			private function cleanUp():void {
				timer.stop();
				mic.setLoopBack(false);
				mic = null;
	//			if (playingAudio) soundChannel.stop();				
			}
			
			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";
			private function onHelpButtonClicked():void {
				navigateToURL(new URLRequest(DEFAULT_HELP_URL));
			}
           
      private const DELAY_LENGTH:int = 10000; 
      private var soundBytes:ByteArray = new ByteArray();
      private var recordTimer:Timer;
      
      private function testMicrophone():void {
        if (!testMicBtn.selected) {
          playRecording();
        } else {
          recordAudio();
        }
      }
      
      private function recordAudio():void {
        trace("Recording audio"); 
        soundBytes.clear(); 
        mic.setSilenceLevel(0, DELAY_LENGTH); 
        mic.setUseEchoSuppression(true);
        mic.setLoopBack(false);
        // Force the codec and the rate to Nelly at 44kHz as
        // the codec and rate changes to Speex 16Khz when we join the
        // voice conference. If we don't do this, when the user
        // re-test the mic, the audio playback will be fast. (ralam apr 4, 2013)
        mic.codec = SoundCodec.NELLYMOSER;
        mic.gain = 60;
        mic.rate = 44; 
        mic.addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler); 
        
        recordTimer = new Timer(DELAY_LENGTH); 
        recordTimer.addEventListener(TimerEvent.TIMER, timerHandler); 
        recordTimer.start();         
      }
      
      private function micSampleDataHandler(event:SampleDataEvent):void  { 
        trace("Storing audio samples");
        while(event.data.bytesAvailable)  { 
          var sample:Number = event.data.readFloat(); 
          soundBytes.writeFloat(sample); 
        } 
      } 
      
      private var sound1:Sound =  new Sound(); 
      private var channel:SoundChannel; 
      
      private function timerHandler(event:TimerEvent):void  {
        
      } 
      
      private function playRecording():void {
        trace("Playing recorded audio");
        mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler); 
        soundBytes.position = 0; 
        sound1.addEventListener(SampleDataEvent.SAMPLE_DATA, playbackSampleHandler); 
        channel = sound1.play();
        channel.addEventListener( Event.SOUND_COMPLETE, playbackComplete );  
      }
      
      private function playbackSampleHandler(event:SampleDataEvent):void  { 
        for (var i:int = 0; i < 8192 && soundBytes.bytesAvailable > 0; i++)  { 
          var sample:Number = soundBytes.readFloat(); 
          event.data.writeFloat(sample); 
          event.data.writeFloat(sample); 
        } 
      } 
      
      private function playbackComplete( event:Event ):void { 
        trace( "Playback finished."); 
      }
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:HBox width="100%">
			<mx:VBox width="100%">
				<mx:Spacer height="5"/>
				<mx:HBox width="100%">
					<mx:Label id="testMicLabel" text="Test Microphone" styleName="micSettingsWindowTestMicrophoneLabelStyle"/>
					<mx:Spacer width="100%"/>
					<mx:LinkButton fontSize="10" label="" 
								   styleName="micSettingsWindowHelpButtonStyle"
								   click="onHelpButtonClicked()"/>          
				</mx:HBox>
				<mx:HRule width="100%"/>
			</mx:VBox> 
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:VBox width="70%">
				<mx:HBox width="100%" >
          	
					<mx:Text id="mic1Label" text="{ResourceUtil.getInstance().getString('bbb.micSettings.micName')}" styleName="micSettingsWindowMicNameLabelStyle"/>
        
				<mx:ProgressBar id="micLevel1" minimum="0" maximum="100"  
									labelPlacement="right" label="" styleName="micSettingsWindowMicProgressBarStyle"
									direction="right" mode="manual" visible="true" width="120"/>	          
          <mx:Spacer width="100%"/>
          <mx:Button id="settingBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.changeMic')}" 
                     styleName="micSettingsWindowChangeMicButtonStyle"
                     click="showMicSettingsPanel()"/>	
				</mx:HBox>			
        <mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakIntoMic')}"
                 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />
        <mx:Button id="testMicBtn" label="Test" toggle="true"
                   styleName="micSettingsWindowChangeMicButtonStyle"
                   click="testMicrophone()"/>
			</mx:VBox>
		</mx:HBox>	
		<mx:HBox width="100%">
			<mx:Spacer width="80%"/>
			<mx:Button id="okBtn" label="{ResourceUtil.getInstance().getString('bbb.micSettings.join')}" 
					   styleName="micSettingsWindowJoinButtonStyle"
					   click="onJoinClicked()"/>
			<mx:Spacer width="10"/>
			<mx:Button id="cancelBtn" label="Cancel" 
					   styleName="micSettingsWindowCancelButtonStyle"
					   click="onCancelClicked()"/>
		</mx:HBox>
		
	</mx:VBox>		
</mx:TitleWindow>
